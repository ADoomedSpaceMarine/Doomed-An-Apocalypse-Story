class DemonsBane : Weapon replaces supershotgun
{
    int BarrelsFired;
    int ShotType; 
    bool BarrelOneFired;
    bool BarrelTwoFired;
    bool ShellsSwitched;

    /* ShotType has 5 types numbered 0-3
    0: Buckshot
    1: Slugs
    2: SCIMTR-12 Flachette 
    3: Fin-stabilized FRAG-12 Rounds
    */


    default
    {
        Weapon.SelectionOrder 325;
        Weapon.BobStyle "smooth";
        Weapon.AmmoType1 "Shell2";
        Weapon.AmmoType2 "Shell2";
        Weapon.AmmoUse1 1;
        Weapon.AmmoUse2 1;
        Weapon.AmmoGive1 2;
		Inventory.PickupSound ("weapons/ONUClose");
        Inventory.PickupMessage "You picked up the Demon's Bane over and under shotgun!";
        Obituary "%o was blown away by %k's Demon's Bane";
        Weapon.SlotNumber 3;
        Weapon.SlotPriority 3;
		scale 0.75;
        Weapon.UpSound "weapons/ONUClose";
        Weapon.KickBack 120;
        +Weapon.NOAUTOFIRE;
        +Weapon.NOAUTOAIM;
		decal "BulletChip";
    }
    
    states
    {
        Select:
            ONUG A 1 A_Raise(12);               //raise the weapon
            loop;                           //keep it raised
        Deselect:
            TNT1 A 0
            {
            if(CountInv("shell2") == 0)
            {
                ACS_NamedExecute("OutOfShells");
                A_PlaySound("Weapons/ANNup",CHAN_AUTO);
                return ResolveState(null);
            }
            else 
            {
                return ResolveState(null);
            }
            }
            ONUG A 1 A_Lower(12);               //lower the weapon
            loop;                           //keep it lowered
        Ready:
            ONUG A 1
            {
                if(invoker.BarrelsFired == 2)                                                                 //otherwise                         
                {
                    return ResolveState ("Reload");                                  //goto reload
                }
                else if(invoker.BarrelsFired != 2)                                        //If shots fired isn't equal to two
                {
                    A_WeaponReady(WRF_ALLOWRELOAD);                                  //Weapon is ready to fire and reload
                    A_WeaponReady(WRF_ALLOWUSER1);                                   //And to switch firemodes
                    A_weaponReady(WRF_ALLOWUSER2);  
                    return ResolveState(null);
                }
                else
                {
                    return ResolveState (null);
                }
            }
            loop;
        NoAmmoReady:
            ONUG A 1
                {
                    if(CountInv("Shell2") > 2)
                    {
                        A_WeaponReady(WRF_ALLOWRELOAD);
                        return ResolveState("Reload");
                    }
                    else
                    {   
                        A_WeaponReady(WRF_ALLOWRELOAD);
                        return ResolveState(null);

                    }
                }
                loop;
        User1:
        ONUG A 0
            {
                if(Invoker.ShotType == 3)           //If the shot type variable is equal to three
                {
                invoker.ShotType = 0;               //reset ShotType to 0 (Buckshot)
                return ResolveState("MsgState");    //Go to ammo switch message switch block
                } 
                else if (invoker.ShotType != 3)     //Otherwise if shot type is not equal to three
                {
                invoker.ShotType++;                  //Incriment shot type variable by one
                return ResolveState("MsgState");     //Go to ammo switch message switch block
                }
                else 
                {
                    return ResolveState(null); 
                }
        }
        goto ready;

        User2:
        ONUG A 0 
            {
                if(Invoker.ShotType == 0)           //If the shot type variable is equal to zero
                {
                invoker.ShotType = 3;               //reset ShotType to 3 (Frag-12)
                return ResolveState("MsgState");    //Go to ammo switch message switch block
                } 
                else if (Invoker.ShotType != 0)     //otherwise if shot type is not equal to zero
                {   
                invoker.ShotType--;                  //decriment shot type by one
                return ResolveState("MsgState");    //Go to ammo switch message switch block
                }
                else
                {
                    return ResolveState(null);
                }    
            }
        goto ready;

        MsgState:
        TNT1 A 0
        {
         switch(invoker.ShotType)
            {
                case 0: ACS_Execute(3650);              //Play buckshot message
                break;                                  //Break out of the switch block

                case 1: ACS_Execute(3651);              //Play slug message
                break;                                  //Break out of the switch block

                case 2: ACS_Execute(3652);              //Play flechette message
                break;                                  //Break out of the switch block

                case 3: ACS_Execute(3661);              //Play frag-12 message
                break;                                  //Break out of the switch block
            }
            invoker.ShellsSwitched = true;
        }                                          
        goto reload; 

        Fire:
            TNT1 A 0 
            {
                if(GetPlayerInput (MODINPUT_BUTTONS) & BT_ALTATTACK && invoker.BarrelsFired == 0)       //If both fire and altfire are pressed, and BarrelsFired is not greater than zero 
                {
                    return ResolveState ("FireBoth");                                                   //goto fire both barrels state
                }
                else if (invoker.BarrelOneFired == true)                                                //If barrel one has been fired already 
                { 
                    return ResolveState ("DryFire");                                                    //goto the dryfire state
                }
                else                                                                                    //otherwise
                {                                                                               
                    return ResolveState (null);                                                         //continue past the condition checker
                }
            }
            ONUG A 1 A_GunFlash;                                                                    //Play gun flash animation
            ONUG A 0                                                                              //Proceed to fire the gun
            {
				A_ZoomFactor(1,ZOOM_INSTANT);
                A_PlaySound ("Weapons/DBSHOT", CHAN_AUTO);                                           //Play the fire sound
                switch(invoker.ShotType)                                                            //Determine what type of shot to fire
                {
                    case 0: //Buckshot Fired
                    A_FireBullets(random(7,8), random(2,3), 9,random (6,8), "bulletpuff");          //fire the pellets
                    A_Recoil(2*cos(pitch));                                                         //Add shot recoil   
                    invoker.BarrelOneFired = true;                                                  //Set our barrel one fired to true
                    invoker.BarrelsFired++;                                                       //Set barrels fired to one
                    A_WeaponReady(WRF_NOBOB|WRF_NOSWITCH); 
					break;                                                                          //Break out of the switch block

                    case 1: //Slug Fired
                    A_FireBullets(random(1,2), random (1,2), 1, random(40,50), "bulletpuff");     //Fire the slug
                    A_Recoil(2*cos(pitch));                                                         //Add shot recoil   
                    invoker.BarrelOneFired = true;                                                  //Set our barrel one fired to true
                    invoker.BarrelsFired++;                                                       //Set barrels fired to one
                    A_WeaponReady(WRF_NOBOB|WRF_NOSWITCH); 
					break;                                                                          //Break out of the switch block

                    case 2: //Flechette Fired
                    A_FireBullets(random(2,3), random (2,3), 10, random(9,12), "bulletpuff");       //Fire the flechettes
                    A_Recoil(2*cos(pitch));                                                         //Add shot recoil   
                    invoker.BarrelOneFired = true;                                                  //Set our barrel one fired to true
                    invoker.BarrelsFired++;                                                       //Set barrels fired to one
                    A_WeaponReady(WRF_NOBOB|WRF_NOSWITCH); 
					break;                                                                          //Break out of the switch block

                    case 3: //Frag-12 Fired
                    A_FireProjectile("FRAG12", 0, 1, 0, 0);                                           //Fire A Frag-12
                    A_Recoil(3*cos(pitch));                                                         //Add shot recoil   
                    invoker.BarrelOneFired = true;                                                  //Set our barrel one fired to true
                    invoker.BarrelsFired++;                                                       //Set barrels fired to one
                    A_WeaponReady(WRF_NOBOB|WRF_NOSWITCH); 
					break;                                                                          //Break out of the switch block
                }
            }
                                                                                                    //Additional recoil calls below here
			ONUF C 1
            {
				A_SpawnItemEx("DBSmoke",random(20,21),0,sin(-pitch)*25+random(35,40), random(2,3),0,1,0);
	          A_SetPitch(pitch-6.0);
	            A_ZoomFactor(0.965,ZOOM_INSTANT);
	        }
			 ONUF D 1
            {
	            A_SetPitch(pitch+3.0);
	            A_ZoomFactor(0.965,ZOOM_INSTANT);
	        }
	       
	        ONUF G 1 
            {
	            A_SetPitch(pitch+3.0);
	            A_ZoomFactor(0.98,ZOOM_INSTANT);
            }
	        ONUF D 1 
            {
				A_WeaponReady(WRF_NOBOB|WRF_NOSWITCH); 
	            A_ZoomFactor(0.995,ZOOM_INSTANT);
	        }
            ONUF C 1                                                                          
            {
				A_WeaponReady(WRF_NOBOB|WRF_NOSWITCH); 
	            A_ZoomFactor(1,ZOOM_INSTANT);
	        }
            goto Ready;                              //Finish off fire cycle, goto ready

        AltFire:
            TNT1 A 0 
            {
                if(GetPlayerInput (MODINPUT_BUTTONS) & BT_ATTACK && invoker.BarrelsFired == 0)          //otherwise//If both altfire and fire are pressed, and BarrelsFired is not greater than zero 
                {
                    return ResolveState ("FireBoth");                                                   //goto fire both barrels state
                }
                   else if (invoker.BarrelTwoFired == true)                                                //If barrel one has been fired already 
                { 
                    return ResolveState ("DryFire");                                                    //goto the dryfire state
                }
                else                                                                                    //otherwise
                {                                                                               
                    return ResolveState (null);                                                         //continue past the condition checker
                }
            }
            ONUG A 1 A_GunFlash;                                                                    //Do the gunflash animation
            ONUG A 1                                                                               //Proceed into firing the gun
            {
                A_PlaySound ("Weapons/DBSHOT", CHAN_AUTO);                                           //Play the fire sound
                switch(invoker.ShotType)                                                            //Determin what type of shot to fire
                {
                    case 0: //Buckshot Fired
                    A_FireBullets(random(7,8), random(2,3), 9,random (6,8), "bulletpuff");          //fire the pellets
                    A_Recoil(2*cos(pitch));                                                         //Add shot recoil   
                    invoker.BarrelTwoFired = true;                                                  //Set our barrel two fired to true
                    invoker.BarrelsFired++;                                                       //Set barrels fired to one
                    A_WeaponReady(WRF_NOBOB|WRF_NOSWITCH); 
					break;                                                                          //Break out of the switch block

                    case 1: //Slug Fired
                    A_FireBullets(random(1,2), random (1,2), 1, random(50,60), "bulletpuff");     //Fire the slug
                    A_Recoil(2*cos(pitch));                                                         //Add shot recoil   
                    invoker.BarrelTwoFired = true;                                                  //Set our barrel two fired to true
                    invoker.BarrelsFired++;                                                       //Set barrels fired to one
                    A_WeaponReady(WRF_NOBOB|WRF_NOSWITCH); 
					break;                                                                          //Break out of the switch block

                    case 2: //Flechette Fired
                    A_FireBullets(random(2,3), random (2,3), 10, random(9,12), "bulletpuff");       //Fire the flechettes
                    A_Recoil(2*cos(pitch));                                                         //Add shot recoil   
                    invoker.BarrelTwoFired = true;                                                  //Set our barrel two fired to true
                    invoker.BarrelsFired++;                                                       //Set barrels fired to one
					A_WeaponReady(WRF_NOBOB|WRF_NOSWITCH);                   
				    break;                                                                          //Break out of the switch block

                    case 3: //Frag-12 Fired
                    A_FireProjectile("FRAG12", 0, 1, 0, 0);                                           //Fire A Frag-12
                    A_Recoil(2*cos(pitch));                                                         //Add shot recoil            
                    invoker.BarrelTwoFired = true;                                                  //Set our barrel two fired to true
                    invoker.BarrelsFired++;                                                       //Set barrels fired to one
                    A_WeaponReady(WRF_NOBOB|WRF_NOSWITCH); 
					break;                                                                          //Break out of the switch block
                }
            }
                                                                                                    //Additional recoil calls below here
			ONUF C 1
            {
				A_SpawnItemEx("DBSmoke",random(20,21),0,sin(-pitch)*25+random(35,40), random(2,3),0,1,0);
				A_SetPitch(pitch-6.0);
	            A_ZoomFactor(0.965,ZOOM_INSTANT);
	        }
			 ONUF D 1
            {
	            A_SetPitch(pitch+2.0);
	            A_ZoomFactor(0.965,ZOOM_INSTANT);
	        }
	       
	        ONUF G 1 
            {
	            A_SetPitch(pitch+2.0);
	            A_ZoomFactor(0.98,ZOOM_INSTANT);
            }
	        ONUF D 1 
            {
                A_SetPitch(pitch+2.0);
	            A_ZoomFactor(0.995,ZOOM_INSTANT);
	        }
            ONUF C 1                                                                          
            {
	            A_ZoomFactor(1,ZOOM_INSTANT);
	        }
            goto Ready;                             //Finish off Altfire cycle, goto ready
       
        FireBoth:
            TNT1 A 0 
            {
                if(invoker.ShellsSwitched == 1)       
                {
                    return ResolveState (null);                                                   //goto fire both barrels state
                }
                else if (invoker.BarrelsFired > 0)                                                //If barrel one has been fired already 
                { 
                    return ResolveState ("DryFire");                                                    //goto the dryfire state
                }
                else if(CountInv("shell2") < 2)
                {
                    return ResolveState ("DryFire");
                }
                else                                                                                    //otherwise
                {                                                                               
                    return ResolveState (null);                                                         //continue past the condition checker
                }
            }
            ONUG A 1 A_GunFlash;                                                                    //Do the gunflash animation
            ONUG A 1                                                                                //Proceed into firing the gun
            {
                A_TakeInventory("Shell2", 1);                                                           //Take an extra shell for double fire
                A_PlaySound ("Weapons/ONUDual", CHAN_AUTO);                                         //Play the fire sound
                switch(invoker.ShotType)                                                            //Determin what type of shot to fire
                {
                    case 0: //Buckshot Fired
                    A_FireBullets(random(8,10), random(3,4), 18,random (6,8), "bulletpuff");          //fire the pellets
                    A_Recoil(2*cos(pitch));                                                         //Add shot recoil   
                    invoker.BarrelOneFired = true;                                                  //Set our barrel one fired to true
                    invoker.BarrelTwoFired = true;                                                  //Set our barrel two fired to true
                    invoker.BarrelsFired = 2;                                                       //Set barrels fired to two
                    break;                                                                          //Break out of the switch block

                    case 1: //Slug Fired
                    A_FireBullets(random(2,3), random (2,3), 2, random(50,60), "bulletpuff");     //Fire the slug
                    A_Recoil(2*cos(pitch));                                                         //Add shot recoil   
                    invoker.BarrelOneFired = true;                                                  //Set our barrel one fired to true
                    invoker.BarrelTwoFired = true;                                                  //Set our barrel two fired to true
                    invoker.BarrelsFired = 2;                                                       //Set barrels fired to two
                    break;                                                                          //Break out of the switch block

                    case 2: //Flechette Fired
                    A_FireBullets(random(3,4), random (3,4), 20, random(9,12), "bulletpuff");       //Fire the flechettes
                    A_Recoil(2*cos(pitch));                                                         //Add shot recoil   
                    invoker.BarrelTwoFired = true;                                                  //Set our barrel two fired to true
                    invoker.BarrelsFired = 2;                                                       //Set barrels fired to two
                    break;                                                                          //Break out of the switch block

                    case 3: //Frag-12 Fired
                    A_FireProjectile("FRAG12", 0, 1, 0, 0);                                           //Fire two frag-12's
                    A_FireProjectile("FRAG12", 0, 1, 0, 0);                                          
                    A_Recoil(2*cos(pitch));                                                         //Add shot recoil            
                    invoker.BarrelOneFired = true;                                                  //Set our barrel one fired to true
                    invoker.BarrelTwoFired = true;                                                  //Set our barrel two fired to true
                    invoker.BarrelsFired = 2;                                                       //Set barrels fired to two
                    break;                                                                          //Break out of the switch block
                }
            }
                                                                                                    //Additional recoil calls below here
	        ONUF C 1
            {
				A_SpawnItemEx("DBSmoke",random(20,21),0,sin(-pitch)*25+random(35,40), random(2,3),0,1,0);
	            A_SetPitch(pitch-6.0);
	            A_ZoomFactor(0.965,ZOOM_INSTANT);
	        }
			 ONUF D 1
            {
	            A_SetPitch(pitch+2.0);
	            A_ZoomFactor(0.965,ZOOM_INSTANT);
	        }
	       
	        ONUF G 1 
            {
	            A_SetPitch(pitch+2.0);
	            A_ZoomFactor(0.98,ZOOM_INSTANT);
            }
	        ONUF D 1 
            {
                A_SetPitch(pitch+2.0);
	            A_ZoomFactor(0.995,ZOOM_INSTANT);
	        }
            ONUF C 1                                                                          
            {
	            A_ZoomFactor(1,ZOOM_INSTANT);
	        }
            goto Ready;                             //Finish off doublefire cycle, goto ready

        DryFire:
            ONGU A 0 A_PlaySound ("Weapons/DryFire");   //Play dryfire sound
            goto Ready;                                 //goto ready state
        
        Reload:
            TNT1 A 0
            {
                if (invoker.ShellsSwitched == true)
                {
                    invoker.ShellsSwitched = false;
                    return ResolveState("ReloadAnim");
                }
                if(invoker.BarrelsFired == 0)
                {
                    return ResolveState("ready");
                }
                else if(CountInv("shell2") == 0)
                {
                    return ResolveState("NoAmmoReady");
                }
                else
                {
                    return ResolveState(null);
                }
            }
            ONUR ABCD 1;
            ONUR E 1 
            { 
               switch(invoker.ShotType)                //Base switch on shots type
               {
                case 0: //Eject Buck Casings
                    A_SpawnItemEx("BuckCasing",random(-4,-5),cos(pitch)*25,sin(-pitch)*25+random(20,22),	random(2,3),0,random(5,7),	random(90,105)); //A_FireProjectile("SSGCasingSpawner",0,0,random(7,9),random(-2,-4),FPF_NOAUTOAIM);
	                A_SpawnItemEx("BuckCasing",random(-6,-7),cos(pitch)*25,sin(-pitch)*25+random(20,22),	random(2,3),0,random(5,7),	random(100,110)); //A_FireProjectile("SSGCasingSpawner",0,0,random(-6,-7),random(-2,-4),FPF_NOAUTOAIM);
                    break;
                case 1: //Eject Slug Casings
                    A_SpawnItemEx("SlugCasing",random(-4,-5),cos(pitch)*25,sin(-pitch)*25+random(20,22),	random(2,3),0,random(5,7),	random(90,105)); //A_FireProjectile("SSGCasingSpawner",0,0,random(7,9),random(-2,-4),FPF_NOAUTOAIM);
	                A_SpawnItemEx("SlugCasing",random(-6,-7),cos(pitch)*25,sin(-pitch)*25+random(20,22),	random(2,3),0,random(5,7),	random(100,110)); //A_FireProjectile("SSGCasingSpawner",0,0,random(-6,-7),random(-2,-4),FPF_NOAUTOAIM);
                    break;
                case 2: //Eject Flechete Casings
                    A_SpawnItemEx("ScimCasing",random(-4,-5),cos(pitch)*25,sin(-pitch)*25+random(20,22),	random(2,3),0,random(5,7),	random(90,105)); //A_FireProjectile("SSGCasingSpawner",0,0,random(7,9),random(-2,-4),FPF_NOAUTOAIM);
	                A_SpawnItemEx("ScimCasing",random(-6,-7),cos(pitch)*25,sin(-pitch)*25+random(20,22),	random(2,3),0,random(5,7),	random(100,110)); //A_FireProjectile("SSGCasingSpawner",0,0,random(-6,-7),random(-2,-4),FPF_NOAUTOAIM);
                    break;
                case 3: //Eject Explosive Casings
                    A_SpawnItemEx("ExpCasing",random(-4,-5),cos(pitch)*25,sin(-pitch)*25+random(20,22),	random(2,3),0,random(5,7),	random(90,105)); //A_FireProjectile("SSGCasingSpawner",0,0,random(7,9),random(-2,-4),FPF_NOAUTOAIM);
	                A_SpawnItemEx("ExpCasing",random(-6,-7),cos(pitch)*25,sin(-pitch)*25+random(20,22),	random(2,3),0,random(5,7),	random(100,110)); //A_FireProjectile("SSGCasingSpawner",0,0,random(-6,-7),random(-2,-4),FPF_NOAUTOAIM);
                    break;
                } 
            }
            goto ReloadAnim;

        ReloadAnim:
            ONUR F 1 A_PlaySound("Weapons/ONUOpen");
            ONUR GHIJ 1;
            ONUR K 1 A_PlaySound("Weapons/ONULoad");
            ONUR LM 1;
            ONUR N 1 A_PlaySound("Weapons/ONULoad");
            ONUR OPQRS 1;
            ONUR T 1 A_PlaySound("Weapons/ONUClose");
            ONUR UVWXYZ 1;
            ONRZ A 1;
            ONRZ B 1
            {
                invoker.BarrelOneFired = false;
                invoker.BarrelTwoFired = false;
                invoker.BarrelsFired = 0;
            }
        goto ready;

        Flash:
            ONUF A 1 Bright A_Light1;
            ONUF B 1 Bright A_Light2;
            goto LightDone;
        
        Spawn:
            DBPU A -1;
            Stop;
    }
}
