Class Annihilator : Rocketlauncher replaces RocketLauncher
{	
 int ShotType;		//This is a numerical value for what ammo is being used
 int MirvCheck;

  Default
  {
	  Inventory.PickupSound ("weapons/ANNSlap");
	  Weapon.SelectionOrder 2500;
      Weapon.BobStyle "smooth";
      Weapon.AmmoUse1 1;
	  Weapon.AmmoUse2 0;
      Weapon.AmmoGive1 4;
      Weapon.AmmoGive2 4;
      Weapon.AmmoType "AnnClip";
      Weapon.AmmoType2 "RocketAmmo2";
	  Weapon.UpSound "weapons/ANNSlap";
      Weapon.SlotNumber 5;
      Weapon.SlotPriority 0;
      +WEAPON.NOAUTOFIRE;
      +Weapon.NOAUTOAIM;
	  +WEAPON.AMMO_CHECKBOTH;
	  Inventory.PickupMessage "You found the Annihilator Versatile Rocket Defense System, Blow some stuff up!";
      Obituary "%o was blown to bits by %k's Annihilator Rocket Defense System.";
      Decal "BigScorch";
  }
  States {
    Spawn:
      ANNP A -1;
      Stop;

    Select:
      NRL4 A 1 A_Raise(12);
	  loop;

	  Deselect:
		TNT1 A 0
    	  {
			if(CountInv("RocketAmmo2") <=  4 && CountInv("AnnClip") == 0)
            {
				ACS_NamedExecute("NotEnoughRockets");
                return ResolveState (null);
            }
            else 
			{
			    return ResolveState(null);
			}
           }
		  NRL4 A 1 A_Lower(12);
		  Loop;

    Ready:
      TNT1 A 0 
	  {	
		If(CountInv("AnnClip") == 4) return ResolveState("RealReadyFour");
		Else If(CountInv("AnnClip") == 3) return ResolveState("RealReadyThree");
		Else If(CountInv("AnnClip") == 2) return ResolveState("RealReadyTwo");
		Else If(CountInv("AnnClip") == 1) return ResolveState("RealReadyOne");
		Else If(CountInv("AnnClip")== 0) return ResolveState("RealReadyOne");
		Else return ResolveState(null);
	}

 //Actual Ready States
    RealReadyFour:
    NRLL A 1 A_WeaponReady(WRF_ALLOWRELOAD);
    TNT1 A 0 A_WeaponReady(WRF_ALLOWUSER1);
    TNT1 A 0 A_WeaponReady(WRF_ALLOWUSER2);
    Loop;

    RealReadyThree:
    NRL2 A 1 A_WeaponReady(WRF_ALLOWRELOAD);
    TNT1 A 0 A_WeaponReady(WRF_ALLOWUSER1);
    TNT1 A 0 A_WeaponReady(WRF_ALLOWUSER2);
    Loop;

    RealReadyTwo:
    NRL3 A 1 A_WeaponReady(WRF_ALLOWRELOAD);
    TNT1 A 0 A_WeaponReady(WRF_ALLOWUSER1);
    TNT1 A 0 A_WeaponReady(WRF_ALLOWUSER2);
    Loop;

    RealReadyOne:
    NRL4 A 1 A_WeaponReady(WRF_ALLOWRELOAD);
    TNT1 A 0 A_WeaponReady(WRF_ALLOWUSER1);
    TNT1 A 0 A_WeaponReady(WRF_ALLOWUSER2);
    Loop;
	
    NoAmmoReady:
    NRL4 A 1 A_WeaponReady(WRF_ALLOWRELOAD);
    Loop;
	
//Firemode Switch Key 1
    User1:
	TNT1 A 0
	{
			if(Invoker.ShotType == 6)           //If the shot type variable is equal to three
			{
				invoker.ShotType = 0;               //reset ShotType to 0 (Buckshot)
				return ResolveState("RkMsgState");    //Go to ammo switch message switch block
			} 
			else if (invoker.ShotType != 6)     //Otherwise if shot type is not equal to three
			{
				invoker.ShotType++;                  //Incriment shot type variable by one
				return ResolveState("RkMsgState");     //Go to ammo switch message switch block
			}
			else 
			{
				return ResolveState(null); 
			}
        }
   
    //Firemode Switch Key 2
    User2:
      TNT1 A 0
		{
			if(Invoker.ShotType == 0)           //If the shot type variable is equal to zero
			{
				invoker.ShotType = 6;               //reset ShotType to 3 (Frag-12)
				return ResolveState("RkMsgState");    //Go to ammo switch message switch block
			} 
			else if (Invoker.ShotType != 0)     //otherwise if shot type is not equal to zero
			{   
				invoker.ShotType--;                  //decriment shot type by one
				return ResolveState("RkMsgState");    //Go to ammo switch message switch block
			}
			else
			{
				return ResolveState(null);
			}    
		}
		
	 RkMsgState:
        TNT1 A 0
        {
         switch(invoker.ShotType)
            {
                case 0: ACS_Execute(3655);              //Play Normal Rocket message
                break;                                  //Break out of the switch block

                case 1: ACS_Execute(3656);              //Play Homing Rocket message
                break;                                  //Break out of the switch block

				case 2: ACS_Execute(3663);              //Play Big Iron message
                break;                                  //Break out of the switch block
				
                case 3: ACS_Execute(3657);              //Play Grenade message
                break;                                  //Break out of the switch block

                case 4: ACS_Execute(3658);              //Play Hornet's Hive message
                break;                                  //Break out of the switch block
				
                case 5: ACS_Execute(3659);              //Play QuadShot message
                break;                                  //Break out of the switch block
				
                case 6: ACS_Execute(3660);              //Play Magnus message
                break;                                  //Break out of the switch block
            }    
		}
	goto RocketCycle; 

	RocketCycle:
	TNT1 A 0
	{		
		If(CountInv("AnnClip") == 4) return ResolveState("FourCycle");
		Else If(CountInv("AnnClip") == 3) return ResolveState("ThreeCycle");
		Else If(CountInv("AnnClip") == 2) return ResolveState("TwoCycle");
		Else If(CountInv("AnnClip") == 1) return ResolveState("OneCycle");
		Else If(CountInv("AnnClip") == 0) return ResolveState("OneCycle");
		Else return ResolveState(null); 
	}
	goto Ready;
	
	FourCycle:
		TNT1 A 0 A_StartSound("weapons/AnnCycle", 0);
		NRRC ABCDEFGHIJKLMN 1;
		Goto RealReadyFour;
		
	ThreeCycle:
		TNT1 A 0 A_StartSound("weapons/AnnCycle", 0);
		NRC1 ABCDEFGHIJKLMN 1;
		Goto RealReadyThree;
	
	TwoCycle:
		TNT1 A 0 A_StartSound("weapons/AnnCycle", 0);
		NRC2 ABCDEFGHIJKLMN 1;
		Goto RealReadyTwo;
	
	OneCycle:
		TNT1 A 0 A_StartSound("weapons/AnnCycle", 0);
		NRC3 ABCDEFGHIJKLMN 1;
		Goto RealReadyOne;

Fire:
  TNT1 A 0 
	{
      If((CountInv("AnnClip") == 0)) 
	  {
		return ResolveState ("DryFire");
	  }
	  Else
	  {
		return ResolveState (null);
	  }
	}
	TNT1 A 0 
	{
	A_SpawnItemEx("LargeGunSmoke",random(20,21),0,sin(-pitch)*25+random(35,40), random(2,3),0,1,0);
	A_SpawnItemEx("DBSmoke",random(20,21),0,sin(-pitch)*25+random(35,40), random(2,3),0,1,0);
	A_SpawnItemEx("LargeGunSmoke",random(20,21),0,sin(-pitch)*25+random(35,40), random(2,3),0,1,0);
	  Switch(Invoker.ShotType)
	  {
		Case 0:
			A_FireProjectile("AnnRocket",0 , 1, 0, -1);
			A_StartSound("Weapons/ANNFire",0);
			break;
		Case 1:
			A_FireProjectile("AnnHornet",0 , 1, 0, -1);
			A_StartSound("Weapons/ANNFire",0);
			break;
		Case 2: 
			A_FireProjectile("BigIronProjectile",0 , 1, 0, -1);
			A_StartSound("Weapons/ANNFire",0);
			break;
		Case 3:
			A_FireProjectile("AnnGrenade",0 , 1, 0, -1);
			A_StartSound("Weapons/ANNFire",0);
			break;
		Case 4: 
			A_FireProjectile("HornetHive",0 , 1, 0, -1);
			A_StartSound("Weapons/ANNFire",0);
			break;			
		Case 5: 
			invoker.MirvCheck = 1;
			break;
		Case 6: 
			A_FireProjectile("MagnusCluster",0 , 1, 0, -1);
			A_StartSound("Weapons/ANNFire",0);
			break;
		Default:
			break;
		}
	if(invoker.MirvCheck == 1)
	{
	return ResolveState("FireMirv");
	}
	else
	{
		If(CountInv("AnnClip") == 4) Return ResolveState ("FireFour");
		Else If(CountInv("AnnClip") == 3) Return ResolveState ("FireFour");
		Else If(CountInv("AnnClip") == 2) Return ResolveState ("FireThree");
		Else If(CountInv("AnnClip") == 1) Return ResolveState ("FireTwo");
		Else If(CountInv("AnnClip") == 0) Return ResolveState ("FireOne");
		Else Return ResolveState(null);
	}
}

FireMirv:
TNT1 A 0
{
	invoker.MirvCheck = 0;
	if(CountInv("AnnClip") < 4) 
	{
		Return ResolveState ("reload");
	}
	else 
	{
		return ResolveState (null);
	}
}
	TNT1 A 0 A_StartSound("weapons/ANNCycle", 0);
	NRRC ABCDEFGHIJKLMN 1;
	TNT1 A 0 A_StartSound("Weapons/ANNCycle", 0);
	NRC1 ABCDEFGHIJKLMN 1;
	TNT1 A 0 A_StartSound("weapons/ANNCycle", 0);
	NRC2 ABCDEFGHIJKLMN 1;
	TNT1 A 0 A_StartSound("weapons/ANNCycle", 0);
	NRC3 ABCDEFGHIJKLMN 1;
	TNT1 A 0
	{
	A_StartSound("Weapons/ANNFire",0);
	A_FireProjectile("AnnMIRV",0 , 1, -6, -1);
	A_FireProjectile("AnnMIRV",0 , 1, 6, -1); 
	A_FireProjectile("AnnMIRV",0 , 1, -12, -1);
	A_FireProjectile("AnnMIRV",0 , 1, 12, -1);
	A_TakeInventory("AnnClip", 4);
	}
	goto FireOne;

FireFour:
  NRF1 A 2 Bright A_Light1;
  NRF1 B 1 Bright; 
  NRF1 C 1 Bright A_Light2;
  NRL2 A 1 A_Recoil(2*cos(pitch));
  NRL2 B 1  {
	  A_SetPitch(pitch-5.0);
	  A_ZoomFactor(0.97,ZOOM_INSTANT);
	  }
	NRL2 C 1 {
	  A_SetPitch(pitch+1.0);
	  A_ZoomFactor(0.975,ZOOM_INSTANT);
	  }
	NRL2 E 1 {
	  A_SetPitch(pitch+1.0);
	  A_ZoomFactor(0.985,ZOOM_INSTANT);
	  }
  NRL2 C 1  {
	  A_SetPitch(pitch+1.0);
	  A_ZoomFactor(0.995,ZOOM_INSTANT);
	  }
  NRL2 B 1  {
	  A_SetPitch(pitch+1.0);
	  A_ZoomFactor(1.0,ZOOM_INSTANT);
	  }
  NRL2 A 1 {
	  A_SetPitch(pitch+1.0);
	  A_ZoomFactor(1.0,ZOOM_INSTANT);		
	}
	Goto RocketCycle;  


FireThree:
  NRF2 A 2 Bright A_Light1;
  NRF2 B 1 Bright; 
  NRF2 C 1 Bright A_Light2;
  NRL3 A 1 A_Recoil(2*cos(pitch));
  NRL3 B 1 {
	  A_SetPitch(pitch-6.0);
	  A_ZoomFactor(0.97,ZOOM_INSTANT);
	  }
	NRL3 C 1 {
	  A_SetPitch(pitch+1.0);
	  A_ZoomFactor(0.975,ZOOM_INSTANT);
	  }
	NRL3 D 1 {
	  A_SetPitch(pitch+1.0);
	  A_ZoomFactor(0.98,ZOOM_INSTANT);
	  }
	NRL3 E 1 {
	  A_SetPitch(pitch+1.0);
	  A_ZoomFactor(0.985,ZOOM_INSTANT);
	  }
	NRL3 D 1 {
	  A_SetPitch(pitch+1.0);
	  A_ZoomFactor(0.99,ZOOM_INSTANT);
	  }
  NRL3 C 1  {
	  A_SetPitch(pitch+1.0);
	  A_ZoomFactor(0.995,ZOOM_INSTANT);
	  }
  NRL3 B 1  {
	  A_SetPitch(pitch+1.0);
	  A_ZoomFactor(1.0,ZOOM_INSTANT);
	  }
	Goto RocketCycle;
	
FireTwo:
  NRF3 A 2 Bright A_Light1;
  NRF3 B 1 Bright; 
  NRF3 C 1 Bright A_Light2;
  NRL4 A 1 A_Recoil(2*cos(pitch));
  NRL4 B 1  {
	  A_SetPitch(pitch-5.0);
	  A_ZoomFactor(0.97,ZOOM_INSTANT);
	  }
	NRL4 C 1 {
	  A_SetPitch(pitch+1.0);
	  A_ZoomFactor(0.975,ZOOM_INSTANT);
	  }
	NRL4 E 1 {
	  A_SetPitch(pitch+1.0);
	  A_ZoomFactor(0.985,ZOOM_INSTANT);
	  }
  NRL4 C 1  {
	  A_SetPitch(pitch+1.0);
	  A_ZoomFactor(0.995,ZOOM_INSTANT);
	  }
  NRL4 B 1  {
	  A_SetPitch(pitch+1.0);
	  A_ZoomFactor(1.0,ZOOM_INSTANT);
	  }
  NRL4 A 1
	{
	  A_SetPitch(pitch+1.0);
	  A_ZoomFactor(1.0,ZOOM_INSTANT);
	}	
	Goto RocketCycle;
  
FireOne:
  NRF4 A 2 Bright A_Light1;
  NRF4 B 1 Bright; 
  NRF4 C 1 Bright A_Light2;  
  NRL4 A 1 A_Recoil(2*cos(pitch));
  NRL4 B 1  {
	  A_SetPitch(pitch-5.0);
	  A_ZoomFactor(0.97,ZOOM_INSTANT);
	  }
	NRL4 C 1 {
	  A_SetPitch(pitch+1.0);
	  A_ZoomFactor(0.975,ZOOM_INSTANT);
	  }
	NRL4 E 1 {
	  A_SetPitch(pitch+1.0);
	  A_ZoomFactor(0.98,ZOOM_INSTANT);
	  }
  NRL4 C 1  {
	  A_SetPitch(pitch+1.0);
	  A_ZoomFactor(0.995,ZOOM_INSTANT);
	  }
  NRL4 B 1  {
	  A_SetPitch(pitch+1.0);
	  A_ZoomFactor(1.0,ZOOM_INSTANT);
	  }
  NRL4 A 1 {
	  A_SetPitch(pitch+1.0);
	  A_ZoomFactor(1.0,ZOOM_INSTANT);
	  }
	Goto RocketCycle;

DryFire:
	RDRY AB 2;
	RDRY A 10 A_StartSound("Weapons/ANNDRY",0);
	TNT1 A 0 A_StartSound("Weapons/ANNCycle",0);
	RDRY CDEFGHGFEDC 1;
	goto Reload;

Reload:
   TNT1 A 0 
   { 
	if(CountInv("AnnClip") == 0 && CountInv("RocketAmmo2") < 4)
	{
		A_SelectWeapon("",SWF_SELECTPRIORITY);
		return ResolveState (null);
	}
		if(CountInv("AnnClip") >= 1 && CountInv("RocketAmmo2") < 4)
	{
		return ResolveState ("Ready");
	}
	else
	{
		return ResolveState (null);
	}
	}
	TNT1 A 0
	{
	if (CheckInventory (invoker.ammoType1, 0) || !CheckInventory (invoker.ammoType2, 1))
                return ResolveState ("Ready");

            int ammoAmount = min (FindInventory (invoker.ammoType1).maxAmount - CountInv (invoker.ammoType1), CountInv (invoker.ammoType2));
            if (ammoAmount <= 0)
                return ResolveState ("Ready");

            GiveInventory (invoker.ammoType1, ammoAmount);
            TakeInventory (invoker.ammoType2, ammoAmount);
			return ResolveState (null);
	}
	NRLR AB 1;
	NRLR C 1 A_StartSound("Weapons/ANNout", 0);
	TNT1 A 0 A_SpawnItemEx("AnnEmClip",10,12,sin(-pitch)*25+random(20,22),	random(2,3),-2,random(5,7),	random(-90,-105)); 
	NRLR DEFGH 2;
	NRLR IJ 1;
	NRLR K 2;
	NRLR L 2 A_StartSound("Weapons/ANNin", 0);
	NRLR MNO 1;
	NRLR PQ 2;
	NRLR R 1 A_StartSound("Weapons/ANNSLAP",0);
	NRLR RSTUVWX 2;
	goto Ready;
 }
}